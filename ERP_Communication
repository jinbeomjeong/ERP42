import time
import numpy as np

def Send_Command(Program_Mode = 0, EStop = 0, Gear_Position = 0, Wheel_Speed = 0.0, Steering_Angle = 0.0, Brake_Position = 0.0):
    header = 'STX'
    Wheel_Speed = np.uint16(Wheel_Speed * 10.0)
    Wheel_Speed_HighBit, Wheel_Speed_LowBit = np.uint8(Wheel_Speed >> 8),np.uint8(Wheel_Speed & 0xff)

    Steering_Angle = np.int16(Steering_Angle * 71.0)
    Steering_Angle_HighBit, Steering_Angle_LowBit = np.uint8(Steering_Angle >> 8), np.uint8(Steering_Angle & 0xff)

    Brake_Position = np.uint8(Brake_Position * 2.0)

    quotient, remainder = divmod(time.time() * 10, 255)
    Alive = np.uint8(remainder)

    command = bytearray()
    command.extend(header)
    command.extend(chr(Program_Mode))
    command.extend(chr(EStop))
    command.extend(chr(Gear_Position))
    command.extend(chr(Wheel_Speed_HighBit))
    command.extend(chr(Wheel_Speed_LowBit))
    command.extend(chr(Steering_Angle_HighBit))
    command.extend(chr(Steering_Angle_LowBit))
    command.extend(chr(Brake_Position))

    command.extend(chr(Alive))
    command.extend('\r')
    command.extend('\n')

    return command

def Recive_Command(recive_command):
    if 18 == len(str(recive_command)):
        data = bytearray()
        data.extend((recive_command))

        Program_Mode_Raw = data[3]

        if Program_Mode_Raw == 1:
            Program_Mode = np.uint8(1)
        else:
            Program_Mode = np.uint8(0)

        EStop_Raw = data[4]

        if EStop_Raw == 1:
            EStop = np.uint8(1)
        else:
            EStop = np.uint8(0)

        Gear_Position_Raw = data[5]

        if Gear_Position_Raw == 2:
            Gear_Position = 2
        elif Gear_Position_Raw == 1:
            Gear_Position = 1
        else:
            Gear_Position = 0

        Wheel_Speed = (data[6] << 8 | data[7]) / 10.0

        Steering_Angle_Raw = data[8] << 8 | data[9]

        print(Steering_Angle_Raw)

        if Steering_Angle_Raw > 20000:
            Steering_Angle_Raw = 65535 - Steering_Angle_Raw
            Steering_Angle = - Steering_Angle_Raw / 71.0
        else:
            Steering_Angle = Steering_Angle_Raw / 71.0

        Brake_Position = data[10] / 2.0

        Encoder_Raw = data[11] | data[12] | data[13] | data[14]
        Encoder = 7

        Alive = data[15]

    else:
        pass

    Real_Data = [Program_Mode, EStop, Gear_Position, Wheel_Speed, round(Steering_Angle, 2), Brake_Position, Encoder, Alive]

    return Real_Data
